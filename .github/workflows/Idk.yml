name:  Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, i686, aarch64, armv7]
        include:
          - arch: x86_64
            cross: x86_64-linux-gnu-
          - arch: i686
            cross: i686-linux-gnu-
          - arch: aarch64
            cross: aarch64-linux-gnu-
          - arch: armv7
            cross: arm-linux-gnueabi-

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          g++ \
          gcc-x86-64-linux-gnu \
          g++-x86-64-linux-gnu \
          gcc-i686-linux-gnu \
          g++-i686-linux-gnu \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu \
          gcc-arm-linux-gnueabi \
          g++-arm-linux-gnueabi \
          upx

    - name: Build for ${{ matrix.arch }}
      run: |
        mkdir -p build/${{ matrix.arch }}
        # Compile with size optimizations
        ${{ matrix.cross }}g++ -Os -fno-exceptions -fno-rtti -Wl,--strip-all \
          abx2xml.cpp -o build/${{ matrix.arch }}/abx2xml
        ${{ matrix.cross }}g++ -Os -fno-exceptions -fno-rtti -Wl,--strip-all \
          xml2abx.cpp -o build/${{ matrix.arch }}/xml2abx
        
        # Make executable
        chmod +x build/${{ matrix.arch }}/*
        
        # Compress with UPX (except for ARM64 which UPX doesn't support)
        if [ "${{ matrix.arch }}" != "aarch64" ]; then
          upx --best --lzma build/${{ matrix.arch }}/*
        fi

    - name: Upload ${{ matrix.arch }} binaries
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.arch }}
        path: build/${{ matrix.arch }}/*

  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]

    steps:
    - uses: actions/checkout@v4

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.3

    - name: Install UPX
      run: |
        Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-win64.zip" -OutFile "upx.zip"
        Expand-Archive -Path "upx.zip" -DestinationPath "C:\upx"
        echo "C:\upx\upx-4.2.1-win64" | Out-File -FilePath $env:GITHUB_PATH -Append

    - name: Build for Windows ${{ matrix.arch }}
      shell: cmd
      run: |
        mkdir build\windows-${{ matrix.arch }}
        
        if "${{ matrix.arch }}" == "x64" (
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        ) else (
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
        )
        
        cl.exe /O2 /Os /GS- /DNDEBUG abx2xml.cpp /Fe:build\windows-${{ matrix.arch }}\abx2xml.exe
        cl.exe /O2 /Os /GS- /DNDEBUG xml2abx.cpp /Fe:build\windows-${{ matrix.arch }}\xml2abx.exe
        
        upx --best --lzma build\windows-${{ matrix.arch }}\*.exe

    - name: Upload Windows ${{ matrix.arch }} binaries
      uses: actions/upload-artifact@v4
      with:
        name: binaries-windows-${{ matrix.arch }}
        path: build/windows-${{ matrix.arch }}/*

  android-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        abi: [armeabi-v7a, arm64-v8a, x86, x86_64]

    steps:
    - uses: actions/checkout@v4

    - name: Install UPX
      run: sudo apt-get update && sudo apt-get install -y upx

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26b
        local-cache: true

    - name: Build Android binaries
      run: |
        mkdir -p build/android/${{ matrix.abi }}
        
        # Set compiler and flags based on ABI
        case ${{ matrix.abi }} in
          armeabi-v7a)
            TARGET=armv7a-linux-androideabi
            ;;
          arm64-v8a)
            TARGET=aarch64-linux-android
            ;;
          x86)
            TARGET=i686-linux-android
            ;;
          x86_64)
            TARGET=x86_64-linux-android
            ;;
        esac
        
        TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        CXX=$TOOLCHAIN/bin/$TARGET${{ matrix.abi == 'armeabi-v7a' && '21' || '21' }}-clang++
        
        # Build with optimizations
        $CXX -Os -fno-exceptions -fno-rtti -Wl,--strip-all \
          abx2xml.cpp -o build/android/${{ matrix.abi }}/abx2xml
        $CXX -Os -fno-exceptions -fno-rtti -Wl,--strip-all \
          xml2abx.cpp -o build/android/${{ matrix.abi }}/xml2abx
        
        # Make executable
        chmod +x build/android/${{ matrix.abi }}/*
        
        # Compress with UPX (except for ARM64)
        if [ "${{ matrix.abi }}" != "arm64-v8a" ]; then
          upx --best --lzma build/android/${{ matrix.abi }}/*
        fi

    - name: Upload Android binaries
      uses: actions/upload-artifact@v4
      with:
        name: android-binaries-${{ matrix.abi }}
        path: build/android/${{ matrix.abi }}/*
